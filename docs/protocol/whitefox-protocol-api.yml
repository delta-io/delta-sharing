openapi: "3.0.2"
info:
  title: whitefox
  version: "1.0"
  description: additive extension to delta-sharing API with the aim to provide a full-fledged experience (both publishers and consumers) and open to table formats different from Delta Lake
  contact:
    email: communityimpact@agilelab.it
    name: Agile Lab
    url: https://www.agilelab.it
servers:
  - url: 'http://localhost:8083'
tags:
  - name: providerV1
  - name: tableV1
  - name: metastoreV1
  - name: storageV1
  - name: shareV1
  - name: schemaV1
paths:
  /whitefox-api/v1/providers:
    post:
      tags:
        - providerV1
      operationId: AddProvider
      description: Add a new provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProviderInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Provider"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    get:
      operationId: ListProviders
      description: List all providers
      tags:
        - providerV1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Provider"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/providers/{name}:
    patch:
      description: Update an existing provider
      operationId: UpdateProvider
      tags:
        - providerV1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProviderInput"
      responses:
        "200":
          description: OK, provider updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Provider"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    delete:
      operationId: DeleteProvider
      description: Delete a provider
      tags:
        - providerV1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: force
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: deleted
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    get:
      operationId: GetProvider
      description: Get a provider related info
      tags:
        - providerV1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Provider"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/providers/{providerName}/tables:
    post:
      description: Create a new table for provider
      operationId: CreateTableInProvider
      tags:
        - tableV1
      parameters:
        - name: providerName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTableInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInfo"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    get:
      tags:
        - tableV1
      description: get the list of tables declared by this provider
      operationId: ListTablesInProvider
      parameters:
        - name: providerName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TableInfo"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/providers/{providerName}/tables/{tableName}/validate:
    post:
      description: Validate the table
      operationId: ValidateTable
      tags:
        - tableV1
      parameters:
        - name: providerName
          in: path
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/providers/{providerName}/tables/{tableName}:
    patch:
      operationId: PatchTableInProvider
      description: Update a table in a Provider
      tags:
        - tableV1
      parameters:
        - name: providerName
          in: path
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchTableInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInfo"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    delete:
      operationId: DeleteTableInProvider
      description: Delete a table from a provider
      tags:
        - tableV1
      parameters:
        - name: providerName
          in: path
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          required: true
          schema:
            type: string
        - name: force
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    get:
      description: get the description of a table in a provider
      operationId: DescribeTableInProvider
      tags:
        - tableV1
      parameters:
        - name: providerName
          in: path
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInfo"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/metastores:
    post:
      description: Create a new metastore
      operationId: CreateMetastore
      tags:
        - metastoreV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMetastore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metastore"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    get:
      description: list all metastores
      operationId: ListMetastores
      tags:
        - metastoreV1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Metastore"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/metastores/{name}:
    patch:
      description: update an existing metastore
      operationId: UpdateMetastore
      tags:
        - metastoreV1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMetastore"
      responses:
        "200":
          description: OK, metastore updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metastore"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    delete:
      operationId: DeleteMetastore
      description: delete a metastore
      tags:
        - metastoreV1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: force
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: deleted
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    get:
      operationId: DescribeMetastore
      description: Get info about a given metastore
      tags:
        - metastoreV1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metastore"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/metastores/{name}/validate:
    post:
      operationId: ValidateMetastore
      description: Validate a metastore
      tags:
        - metastoreV1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/storages:
    post:
      operationId: CreateStorage
      description: Add a new storage
      tags:
        - storageV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStorage"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Storage"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    get:
      operationId: ListStorage
      description: List storage
      tags:
        - storageV1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Storage"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/storages/{name}:
    patch:
      operationId: UpdateStorage
      description: Update an existing storage
      tags:
        - storageV1
      parameters:
        - required: true
          name: name
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStorage"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Storage"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    delete:
      operationId: DeleteStorage
      description: Delete an existing storage
      tags:
        - storageV1
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
        - name: force
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: deleted
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    get:
      operationId: DescribeStorage
      description: Describe storage
      tags:
        - storageV1
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Storage"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/storages/{name}/validate:
    post:
      operationId: ValidateStorage
      description: Validate an existing storage
      tags:
        - storageV1
      parameters:
        - required: true
          name: name
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/shares:
    post:
      operationId: CreateShare
      description: Create a new share
      tags:
        - shareV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateShareInput"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShareInfo"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/shares/{share}:
    delete:
      operationId: DeleteShare
      description: Delete a share
      tags:
        - shareV1
      parameters:
        - in: path
          name: share
          required: true
          description: "Named share"
          schema:
            type: string
      responses:
        "200":
          description: share deleted
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    patch:
      operationId: UpdateShare
      description: update an existing share
      tags:
        - shareV1
      parameters:
        - in: path
          name: share
          required: true
          description: "Named share"
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateShareInput"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShareInfo"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/shares/{share}/recipients:
    put:
      operationId: AddRecipientToShare
      description: add a recipient to share
      tags:
        - shareV1
      parameters:
        - in: path
          name: share
          required: true
          description: "Named share"
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                principals:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: recipients added
          content:
            application/json:
              schema:
                type: object
                description: all the recipients currently part of the share
                properties:
                  principals:
                    type: array
                    items:
                      type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/shares/{share}/{schema}:
    post:
      operationId: CreateSchema
      description: create a schema in a share
      tags:
        - shareV1
        - schemaV1
      parameters:
        - in: path
          name: share
          required: true
          description: name of the share
          schema:
            type: string
        - in: path
          name: schema
          required: true
          description: name of the schema to be created
          schema:
            type: string
      responses:
        "200":
          description: schema created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShareInfo"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    delete:
      operationId: DeleteSchema
      description: delete a schema from a share
      tags:
        - shareV1
        - schemaV1
      parameters:
        - in: path
          name: share
          required: true
          description: name of the share
          schema:
            type: string
        - in: path
          name: schema
          required: true
          description: name of the schema to be deleted
          schema:
            type: string
      responses:
        "204":
          description: schema deleted
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/shares/{share}/{schema}/tables:
    post:
      operationId: AddTableToSchema
      description: add a table to a schema
      tags:
        - shareV1
        - schemaV1
        - tableV1
      parameters:
        - in: path
          name: share
          required: true
          description: name of the share
          schema:
            type: string
        - in: path
          name: schema
          required: true
          description: name of the schema where the table will be added
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TableReference"
      responses:
        "200":
          description: table added to schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInfo"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
    get:
      operationId: ListTablesInSchema
      description: list tables within a schema
      tags:
        - shareV1
        - schemaV1
        - tableV1
      parameters:
        - in: path
          name: share
          required: true
          description: name of the share
          schema:
            type: string
        - in: path
          name: schema
          required: true
          description: name of the schema for which tables will be listed
          schema:
            type: string
      responses:
        "200":
          description: list of tables within the schema
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TableInfo"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /whitefox-api/v1/shares/{share}/{schema}/tables/{table}:
    delete:
      operationId: DeleteTableFromSchema
      tags:
        - shareV1
        - schemaV1
        - tableV1
      description: delete a table from a schema
      parameters:
        - in: path
          name: share
          required: true
          description: name of the share
          schema:
            type: string
        - in: path
          name: schema
          required: true
          description: name of the schema from which the table will be deleted
          schema:
            type: string
        - in: path
          name: table
          required: true
          description: name of the table to be deleted
          schema:
            type: string
      responses:
        "204":
          description: table deleted
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
components:
  schemas:
    StorageCredentials:
      anyOf:
        - $ref: "#/components/schemas/SimpleAwsCredentials"
        - $ref: "#/components/schemas/SimpleAzureCredentials"
    UpdateStorage:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        type:
          type: string
          enum:
            - gcs
            - s3
            - abfs
        credentials:
          $ref: "#/components/schemas/StorageCredentials"
        uri:
          type: string
          example: s3://my-nice-bucket/some/prefix
        skipValidation:
          type: boolean
        force:
          type: boolean
    CreateStorage:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        type:
          type: string
          enum:
            - gcs
            - s3
            - abfs
        credentials:
          $ref: "#/components/schemas/StorageCredentials"
        uri:
          type: string
          example: s3://my-nice-bucket/some/prefix
        skipValidation:
          type: boolean
    CreateMetastore:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        type:
          type: string
          enum:
            - glue
            - hive2
            - hive3
            - iceberg_hadoop
            - iceberg_hive
            - iceberg_jdbc
            - iceberg_nessie
        properties:
          $ref: "#/components/schemas/MetastoreProperties"
        skipValidation:
          type: boolean
    MetastoreProperties:
      anyOf:
        - $ref: "#/components/schemas/GlueProperties"
        - $ref: "#/components/schemas/Hive2Properties"
        - $ref: "#/components/schemas/Hive3Properties"
        - $ref: "#/components/schemas/IcebergHadoopProperties"
        - $ref: "#/components/schemas/IcebergJdbcProperties"
        - $ref: "#/components/schemas/IcebergNessieProperties"
    UpdateMetastore:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        owner:
          type: string
        type:
          type: string
        properties:
          $ref: "#/components/schemas/MetastoreProperties"
        skipValidation:
          type: boolean
        force:
          type: boolean
    Hive2Properties:
      type: object
      properties: { }
    Hive3Properties:
      type: object
      properties: { }
    GlueProperties:
      type: object
      properties:
        catalogId:
          type: string
        credentials:
          $ref: "#/components/schemas/SimpleAwsCredentials"
    IcebergHadoopProperties:
      type: object
      properties: { }
    IcebergJdbcProperties:
      type: object
      properties: { }
    IcebergNessieProperties:
      type: object
      properties: { }
    Metastore:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        owner:
          type: string
        type:
          type: string
        properties:
          $ref: "#/components/schemas/MetastoreProperties"
        validatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        createdBy:
          type: string
        updatedAt:
          type: integer
          format: int64
        updatedBy:
          type: string
    SimpleAwsCredentials:
      type: object
      properties:
        awsAccessKeyId:
          type: string
        awsSecretAccessKey:
          type: string
        region:
          type: string
    SimpleAzureCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Storage:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        owner:
          type: string
        type:
          type: string
        uri:
          type: string
          example: s3://my-nice-bucket/some/prefix
        validatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        createdBy:
          type: string
        updatedAt:
          type: integer
          format: int64
        updatedBy:
          type: string
    Provider:
      type: object
      properties:
        name:
          type: string
        storage:
          $ref: "#/components/schemas/Storage"
        metastore:
          $ref: "#/components/schemas/Metastore"
        createdAt:
          type: integer
          format: int64
        createdBy:
          type: string
        updatedAt:
          type: integer
          format: int64
        updatedBy:
          type: string
    CreateShareInput:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        recipients:
          type: array
          items:
            type: string
        schemas:
          type: array
          items:
            type: string
    TableReference:
      type: object
      properties:
        providerName:
          type: string
        name:
          type: string
    ShareInfo:
      type: object
      properties:
        name:
          type: string
        comment:
          type: string
        recipients:
          type: array
          items:
            type: string
        schemas:
          type: array
          items:
            type: string
        createdAt:
          type: integer
          format: int64
        createdBy:
          type: string
        updatedAt:
          type: integer
          format: int64
        updatedBy:
          type: string

    TableInfo:
      type: object
      properties:
        providerName:
          type: string
        name:
          type: string
        comment:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
        validatedAt:
          type: integer
          format: int64
        createdAt:
          type: integer
          format: int64
        createdBy:
          type: string
        updatedAt:
          type: integer
          format: int64
        updatedBy:
          type: string
    CreateTableInput:
      type: object
      properties:
        name:
          type: string
          description: alias inside this provider of this table, must be unique
        comment:
          type: string
        skipValidation:
          type: boolean
        properties:
          type: object
          additionalProperties:
            type: string
      example:
        name: customer
        properties:
          database: finance
          tableName: customer_123
          type: iceberg
    PatchTableInput:
      type: object
      properties:
        comment:
          type: string
        skipValidation:
          type: boolean
        properties:
          type: object
          additionalProperties:
            type: string
    ProviderInput:
      type: object
      properties:
        name:
          type: string
        storageName:
          type: string
        metastoreName:
          type: string
    ValidationResult:
      type: object
      properties:
        result:
          type: string
          enum:
            - success
            - failure
        message:
          type: string
    CommonErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
  responses:
    "400":
      description: The request is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'
    "401":
      description: The request is unauthenticated. The bearer token is missing or incorrect
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'
    "403":
      description: The request is forbidden from being fulfilled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'
    "404":
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'
    "409":
      description: The specified resource cannot be created because it already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'
    "500":
      description: The request is not handled correctly due to a server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonErrorResponse'